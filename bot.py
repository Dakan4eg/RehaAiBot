import os
import logging
from telegram import Update
from telegram.ext import ApplicationBuilder, MessageHandler, filters, ContextTypes
import requests

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
REDIS_URL = os.getenv("REDIS_URL")   
REDIS_TOKEN = os.getenv("REDIS_TOKEN") 
HF_API_TOKEN = os.getenv("HF_API_TOKEN")
MAX_CONTEXT_LENGTH = 100  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ

# –ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è Upstash Redis REST API
REDIS_HEADERS = {
    "Authorization": f"Bearer {REDIS_TOKEN}",  # –ò—Å–ø–æ–ª—å–∑—É–µ–º REDIS_TOKEN
    "Content-Type": "application/json"
}

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        user_message = update.message.text
        chat_id = update.message.chat.id
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Redis —á–µ—Ä–µ–∑ REST API
        redis_key = f"chat:{chat_id}"
        lpush_url = f"{os.getenv('REDIS_URL')}/lpush/{redis_key}"
        response = requests.post(
            lpush_url,
            headers=REDIS_HEADERS,
            json=[user_message]  # Upstash —Ç—Ä–µ–±—É–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–Ω–∞—á–µ–Ω–∏–π
        )
        
        if response.status_code not in [200, 201]:
            logger.error(f"Redis LPUSH error: {response.text}")
            raise Exception("Redis error")

        # –û–±—Ä–µ–∑–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ MAX_CONTEXT_LENGTH —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        ltrim_url = f"{os.getenv('REDIS_URL')}/ltrim/{redis_key}/0/{MAX_CONTEXT_LENGTH-1}"
        requests.post(ltrim_url, headers=REDIS_HEADERS)

        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç (–ø–æ—Å–ª–µ–¥–Ω–∏–µ MAX_CONTEXT_LENGTH —Å–æ–æ–±—â–µ–Ω–∏–π)
        lrange_url = f"{os.getenv('REDIS_URL')}/lrange/{redis_key}/0/{MAX_CONTEXT_LENGTH}"
        context_response = requests.get(lrange_url, headers=REDIS_HEADERS)
        
        if context_response.status_code != 200:
            logger.error(f"Redis LRANGE error: {context_response.text}")
            context_messages = []
        else:
            context_messages = context_response.json()["result"] or []

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –∫ Hugging Face API
        hf_headers = {"Authorization": f"Bearer {HF_API_TOKEN}"}
        payload = {
            "inputs": {
                "text": user_message,
                "past_user_inputs": context_messages,
                "generated_responses": []
            }
        }

        try:
            hf_response = requests.post(
                "https://api-inference.huggingface.co/models/microsoft/DialoGPT-large",
                headers=hf_headers,
                json=payload,
                timeout=15  # –¢–∞–π–º–∞—É—Ç –¥–ª—è Hugging Face
            )
        except requests.exceptions.Timeout:
            logger.error("Hugging Face API timeout")
            await update.message.reply_text("–°–µ—Ä–≤–∏—Å –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ ‚è≥")
            return

        if hf_response.status_code == 200:
            response_data = hf_response.json()
            if "generated_text" in response_data:
                bot_response = response_data["generated_text"][:4096]  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ Telegram
            else:
                logger.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç API: {response_data}")
                bot_response = "–ù–µ –ø–æ–Ω–∏–º–∞—é –≤–∞—à –∑–∞–ø—Ä–æ—Å üòï"
        else:
            logger.error(f"API error {hf_response.status_code}: {hf_response.text}")
            bot_response = "–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞ ü§ñ"

        await update.message.reply_text(bot_response)

    except Exception as e:
        logger.exception(f"Critical error: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ üò¢")

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    error = context.error
    logger.error(f"Global error handler: {error}", exc_info=error)
    
    if isinstance(error, ConnectionError):
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="–ü—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º üîå –ü–æ–≤—Ç–æ—Ä—è—é –ø–æ–ø—ã—Ç–∫—É..."
        )

def main():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ —Å —Ç–∞–π–º–∞—É—Ç–∞–º–∏
    application = (
        ApplicationBuilder()
        .token(TELEGRAM_TOKEN)
        .read_timeout(30)
        .write_timeout(30)
        .connect_timeout(30)
        .pool_timeout(30)
        .build()
    )

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    application.add_error_handler(error_handler)

    # –ó–∞–ø—É—Å–∫ —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º –æ–ø—Ä–æ—Å–∞
    application.run_polling(
        poll_interval=5,
        timeout=25,
        drop_pending_updates=True
    )

if __name__ == "__main__":
    main()
