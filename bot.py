import os
import logging
from telegram import Update
from telegram.ext import Application, MessageHandler, filters
import redis
import requests

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
REDIS_URL = os.getenv("REDIS_URL")
REDIS_TOKEN = os.getenv("REDIS_TOKEN")
HF_API_TOKEN = os.getenv("HF_API_TOKEN")
MAX_CONTEXT_LENGTH = 100  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis
redis_client = redis.Redis(
    host=REDIS_URL,
    password=REDIS_TOKEN,
    ssl=True,
    decode_responses=True
)

async def handle_message(update: Update, context):
    try:
        user_message = update.message.text
        chat_id = update.message.chat.id
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Redis
        redis_client.lpush(f"chat:{chat_id}", user_message)
        redis_client.ltrim(f"chat:{chat_id}", 0, MAX_CONTEXT_LENGTH - 1)
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 100 —Å–æ–æ–±—â–µ–Ω–∏–π)
        context_messages = redis_client.lrange(f"chat:{chat_id}", 0, MAX_CONTEXT_LENGTH - 1)
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ —á–µ—Ä–µ–∑ Hugging Face API
        headers = {"Authorization": f"Bearer {HF_API_TOKEN}"}
        response = requests.post(
            "https://api-inference.huggingface.co/models/microsoft/DialoGPT-large",
            headers=headers,
            json={"inputs": {"past_user_inputs": context_messages, "text": user_message}}
        )
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—à–∏–±–æ–∫ –∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª–∏–Ω—ã
        if response.status_code == 200:
            bot_response = response.json()["generated_text"]
            bot_response = bot_response[:4096]  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ Telegram
            await update.message.reply_text(bot_response)
        else:
            await update.message.reply_text("–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞ ü§ñ")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ üò¢")

def main():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
    application = Application.builder().token(TELEGRAM_TOKEN).build()
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    application.run_polling()

if __name__ == "__main__":
    main()
